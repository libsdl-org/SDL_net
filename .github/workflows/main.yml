name: Build

on: [push, pull_request]

jobs:
  Build:
    name: ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.os }}

    defaults:
      run:
        shell: ${{ matrix.platform.shell }}

    strategy:
      fail-fast: false
      matrix:
        platform:
        - { name: Windows (MSVC+CMake),         os: windows-latest, shell: sh,   cmake: '-GNinja', msvc: 1, shared: 1, static: 0 }
        - { name: Windows (mingw32+autotools),  os: windows-latest, shell: 'msys2 {0}', msystem: mingw32, msys-env: mingw-w64-i686, shared: 1, static: 1 }
        - { name: Windows (mingw64+CMake),      os: windows-latest, shell: 'msys2 {0}', msystem: mingw64, msys-env: mingw-w64-x86_64, cmake: '-G "Ninja Multi-Config"', shared: 1, static: 0 }
        - { name: Linux (autotools),            os: ubuntu-20.04,   shell: sh , shared: 1, static: 1 }
        - { name: Linux (CMake),                os: ubuntu-20.04,   shell: sh,   cmake: '-GNinja', shared: 1, static: 0 }
        - { name: 'Linux (CMake, static)',      os: ubuntu-20.04,   shell: sh,   cmake: '-DBUILD_SHARED_LIBS=OFF -GNinja', shared: 0, static: 1 }
        - { name: macOS (autotools),            os: macos-latest,   shell: sh, shared: 1, static: 1 }
        - { name: macOS (CMake),                os: macos-latest,   shell: sh,   cmake: '-GNinja', shared: 1, static: 0 }

    steps:
    - uses: actions/checkout@v4
    - uses: ilammy/msvc-dev-cmd@v1
      if: ${{ matrix.platform.msvc }}
      with:
        arch: x64
    - name: Set up MSYS2
      if: matrix.platform.shell == 'msys2 {0}'
      uses: msys2/setup-msys2@v2
      with:
        msystem: ${{ matrix.platform.msystem }}
        path-type: inherit
        install: >-
          ${{ matrix.platform.msys-env }}-autotools
          ${{ matrix.platform.msys-env }}-cmake
          ${{ matrix.platform.msys-env }}-gcc
          ${{ matrix.platform.msys-env }}-ninja
          ${{ matrix.platform.msys-env }}-pkg-config
    - name: Set up ninja
      uses: ./.github/actions/setup-ninja
      if: ${{ !contains(matrix.platform.shell, 'msys2') }}
    - name: Set up SDL
      id: sdl
      uses: libsdl-org/setup-sdl@main
      with:
        cmake-generator: Ninja
        version: 2-head
        sdl-test: true
        shell: ${{ matrix.platform.shell }}
        add-to-environment: true

    - name: Setup macOS dependencies
      if: runner.os == 'macOS'
      run: |
          brew install \
            autoconf \
            automake \
            ${NULL+}

    - name: Setup Linux dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get -y install \
          autoconf \
          automake \
          pkg-config \
          ${NULL+}

    - name: Check that versioning is consistent
      # We only need to run this once: arbitrarily use the Linux/CMake build
      if: "runner.os == 'Linux' && matrix.platform.cmake"
      run: |
        ./build-scripts/test-versioning.sh

    - name: Configure (CMake)
      if: "matrix.platform.cmake"
      run: |
        set -eu
        cmake -S .  -B build-cmake -G Ninja \
          -DBUILD_SHARED_LIBS=ON \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=prefix_cmake \
          -DSDL2NET_SAMPLES=ON \
          ${{ matrix.platform.cmake }}

    - name: Build (CMake)
      if: "matrix.platform.cmake"
      run: cmake --build build-cmake/ --config Release --parallel --verbose

    - name: Install (CMake)
      if: "matrix.platform.cmake"
      run: |
        set -eu
        rm -rf prefix_cmake
        cmake --install build-cmake/ --config Release --verbose
        echo "SDL2_net_DIR=$(pwd)/prefix_cmake" >> $GITHUB_ENV
        ( cd prefix_cmake; find . ) | LC_ALL=C sort -u

    - name: Configure (Autotools)
      if: "! matrix.platform.cmake"
      run: |
        set -eu
        rm -fr build-autotools
        mkdir build-autotools
        ./autogen.sh
        set -- --prefix=$(pwd)/prefix_autotools
        ( cd build-autotools && ../configure "$@" )

    - name: Build (Autotools)
      if: "! matrix.platform.cmake"
      run: |
        set -eu
        parallel="$(getconf _NPROCESSORS_ONLN)"
        make -j"${parallel}" -C build-autotools V=1

    - name: Install (Autotools)
      if: "! matrix.platform.cmake"
      run: |
        set -eu
        curdir="$(pwd)"
        parallel="$(getconf _NPROCESSORS_ONLN)"
        rm -rf prefix_autotools
        make -j"${parallel}" -C build-autotools install V=1
        echo "SDL2_net_DIR=$(pwd)/prefix_autotools" >> $GITHUB_ENV
        ( cd prefix_autotools; find . ) | LC_ALL=C sort -u

    - name: Distcheck (Autotools)
      if: "runner.os == 'Linux' && ! matrix.platform.cmake"
      run: |
        set -eu
        parallel="$(getconf _NPROCESSORS_ONLN)"
        make -j"${parallel}" -C build-autotools distcheck V=1

    - name: Verify CMake configuration files from the installation
      run: |
        cmake -S cmake/test -B cmake_install_config_build \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_PREFIX_PATH="${{ env.SDL2_net_DIR }}" \
          -DTEST_SHARED=${{ matrix.platform.shared }} \
          -DTEST_STATIC=${{ matrix.platform.static }}
        cmake --build cmake_install_config_build --config Release --verbose

    - name: Verify CMake configuration files from the build directory
      if: "matrix.platform.cmake"
      run: |
        cmake -S cmake/test -B cmake_build_config_build \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_PREFIX_PATH="$(pwd)/build-cmake" \
          -DTEST_SHARED=${{ matrix.platform.shared }} \
          -DTEST_STATIC=${{ matrix.platform.static }}
        cmake --build cmake_build_config_build --config Release --verbose
